# -*- coding: utf-8 -*-
"""Diabetes Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HXlakrR2c7yeViEW61jVJOxWINjCm1vi

**Diabetes Prediction**

Import Dependencies..
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Data Pre-Processing."""

#loading the dataset in the pandas dataframe.
diabetes_data = pd.read_csv('/content/diabetes.csv')

#printing the first 5 rows.
diabetes_data.head()

#to know no of rows and cols
diabetes_data.shape

diabetes_data['Outcome'].value_counts()

diabetes_data.describe()

diabetes_data.groupby('Outcome').mean()

X = diabetes_data.drop(columns='Outcome',axis=1)
Y = diabetes_data['Outcome']

print(X)
print(Y)

"""Data Standarlization."""

scaler = StandardScaler()

standarlized_data = scaler.fit_transform(X)

X = standarlized_data
Y = diabetes_data['Outcome']

"""Train_Test_Split."""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Training the Model"""

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train,Y_train)

X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print('Accuracy score of the training data:',training_data_accuracy)

X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print('Accuracy score of test data:',test_data_accuracy)

"""Making a Predictive System"""

input_data = (1,85,66,29,0,26.6,0.351,31)

# changing the input_data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')